services:

  nginx:
    container_name: nginx

    build:
      context: ./nginx
      dockerfile: Dockerfile

    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./nginx/ssl/trusted_cert.pem:/etc/nginx/trusted_cert.pem
      - ./nginx/ssl/cert.pem:/etc/nginx/cert.pem
      - ./nginx/ssl/key.pem:/etc/nginx/key.pem
      - /var/www/certbot:/var/www/certbot/
      - /var/www/naks-infosystem/dist:/var/www/naks-infosystem/dist
      - ./nginx/static:/var/www/naks-infosystem/static

    ports:
      - 80:80
      - 443:443

    networks:
      - infosystem_net

    depends_on:
      - backend
      - auth
      - frontend

    command: > 
      bash -c "export API_DOMAIN=${API_DOMAIN} DOMAIN=${DOMAIN} FILES_DOMAIN=${FILES_DOMAIN} DOLLAR='$' ORIGIN_REGEX='${ORIGIN_REGEX}'
      && envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf
      && nginx -t
      && nginx -g 'daemon off;'"


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - DOMAIN=${DOMAIN}
        - API_DOMAIN=${API_DOMAIN}

    container_name: frontend

    volumes:
      - /var/www/naks-infosystem/dist:/app/dist

    command: "npm run build --mode production"


  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - DATABASE_PASSWORD=${DATABASE_PASSWORD}
        - DATABASE_NAME=${BACKEND_DATABASE_NAME}
        - USER=${USER}
        - PORT=${DB_PORT}
        - MODE=${MODE}
        - HOST=db

    container_name: backend

    restart: always

    ports: 
      - 8000:8000

    networks:
      - infosystem_net

    depends_on:
      - db   
      
    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"

  
  files:
    build:
      context: ./files
      dockerfile: Dockerfile

    volumes:
      - /var/www/naks-infosystem/files:/files_service/static

    container_name: files

    restart: always

    ports: 
      - 8002:8000

    networks:
      - infosystem_net

    depends_on:
      - db

    command: bash -c "cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
      args:
        - DATABASE_PASSWORD=${DATABASE_PASSWORD}
        - DATABASE_NAME=${AUTH_DATABASE_NAME}
        - USER=${USER}
        - PORT=${DB_PORT}
        - MODE=${MODE}
        - SECRET_KEY=${SECRET_KEY}
        - HOST=db

    container_name: auth

    restart: always

    ports: 
      - 8001:8000

    networks:
      - infosystem_net

    depends_on:
      - db

    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  db:
    container_name: db
    restart: always
    image: postgres:16.3-alpine3.20

    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${USER}
      - PGDATA=/var/lib/postgresql/data/
      - POSTGRES_MULTIPLE_DATABASES=${BACKEND_DATABASE_NAME},${AUTH_DATABASE_NAME}

    ports:
      - 5433:${DB_PORT}

    volumes:
      - backend_data:/var/lib/postgresql
      - ./scripts/create_multiple_databases.sh:/docker-entrypoint-initdb.d/create_multiple_databases.sh

    networks:
      - infosystem_net

    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${BACKEND_DATABASE_NAME}", "-U", "${USER}" ]
      timeout: 3s
      retries: 5


volumes:
  backend_data:
  auth_data:


networks:
  infosystem_net:
