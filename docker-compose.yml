services:

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${BACKEND_DATABASE_NAME}
      - USER=${USER}
      - PORT=${DB_PORT}
      - MODE=${MODE}
      - HOST=db

    container_name: backend

    restart: always

    ports: 
      - 8000:8000

    networks:
      - infosystem_net

    depends_on:
      - db   
      
    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${AUTH_DATABASE_NAME}
      - USER=${USER}
      - PORT=${DB_PORT}
      - MODE=${MODE}
      - SECRET_KEY=${SECRET_KEY}
      - HOST=db
      - DOMAIN=${DOMAIN}

    container_name: auth

    restart: always

    ports: 
      - 8001:8000

    networks:
      - infosystem_net

    depends_on:
      - db

    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  files:
    build:
      context: ./files
      dockerfile: Dockerfile

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${FILES_DATABASE_NAME}
      - STATIC_PATH=${STATIC_PATH}
      - USER=${USER}
      - PORT=${DB_PORT}
      - MODE=${MODE}
      - HOST=db

    volumes:
      - /var/www/naks-infosystem/files:/var/www/naks-infosystem/static

    container_name: files

    restart: always

    ports: 
      - 8002:8000

    networks:
      - infosystem_net

    depends_on:
      - db

    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  db:
    restart: always
    image: postgres:16.3-alpine3.20

    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${USER}
      - PGDATA=/var/lib/postgresql/data/
      - POSTGRES_MULTIPLE_DATABASES=${BACKEND_DATABASE_NAME},${AUTH_DATABASE_NAME},${FILES_DATABASE_NAME}

    ports:
      - 5433:${DB_PORT}

    volumes:
      - db_data:/var/lib/postgresql
      - ./scripts/create_multiple_databases.sh:/docker-entrypoint-initdb.d/create_multiple_databases.sh

    networks:
      - infosystem_net

    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${BACKEND_DATABASE_NAME}", "-U", "${USER}" ]
      timeout: 3s
      retries: 5


volumes:
  db_data:


networks:
  infosystem_net:
