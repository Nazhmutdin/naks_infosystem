services:
  nginx:
    container_name: rencons-infosystem-nginx

    build:
      context: ./nginx
      dockerfile: Dockerfile

    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./nginx/nginx.certbot.conf:/etc/nginx/nginx.certbot.conf:ro
      - ./nginx/nginx.files.conf:/etc/nginx/nginx.files.conf:ro
      - ./nginx/nginx.api.conf:/etc/nginx/nginx.api.conf:ro
      - ./nginx/ssl/trusted_cert.pem:/etc/nginx/trusted_cert.pem
      - ./nginx/ssl/cert.pem:/etc/nginx/cert.pem
      - ./nginx/ssl/key.pem:/etc/nginx/key.pem
      - /var/www/certbot:/var/www/certbot/
      - ./nginx/static:/var/www/naks-infosystem/static
      - /var/www/naks-infosystem/logs/:/var/www/naks-infosystem/logs/

    ports:
      - 80:80
      - 443:443

    networks:
      - infosystem_net

    command: > 
      bash -c "export API_DOMAIN=${API_DOMAIN} DOMAIN=${DOMAIN} FILES_DOMAIN=${FILES_DOMAIN} DOLLAR='$' ORIGIN_REGEX='${ORIGIN_REGEX}'
      && envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf
      && envsubst < /etc/nginx/nginx.frontend.conf > /etc/nginx/sites-available/nginx.frontend.conf
      && envsubst < /etc/nginx/nginx.certbot.conf > /etc/nginx/sites-available/nginx.certbot.conf
      && envsubst < /etc/nginx/nginx.files.conf > /etc/nginx/sites-available/nginx.files.conf
      && envsubst < /etc/nginx/nginx.api.conf > /etc/nginx/sites-available/nginx.api.conf
      && ln -sf /etc/nginx/sites-available/nginx.frontend.conf /etc/nginx/sites-enabled/
      && ln -sf /etc/nginx/sites-available/nginx.certbot.conf /etc/nginx/sites-enabled/
      && ln -sf /etc/nginx/sites-available/nginx.files.conf /etc/nginx/sites-enabled/
      && ln -sf /etc/nginx/sites-available/nginx.api.conf /etc/nginx/sites-enabled/
      && nginx -t
      && nginx -g 'daemon off;'"


  frontend:
    container_name: rencons-infosystem-frontend

    build:
      context: ./frontend
      dockerfile: Dockerfile

    environment:
      - DOMAIN=${DOMAIN}
      - API_DOMAIN=${API_DOMAIN}
      - FILES_DOMAIN=${FILES_DOMAIN}

    networks:
      - infosystem_net


  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${BACKEND_DATABASE_NAME}
      - USER=${USER}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - MODE=${MODE}
      - REDIS_USER=${USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

    container_name: rencons-infosystem-backend

    restart: always

    ports: 
      - 8000:8000

    networks:
      - infosystem_net

    depends_on:
      - db   
      
    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${AUTH_DATABASE_NAME}
      - USER=${USER}
      - PORT=${DB_PORT}
      - MODE=${MODE}
      - SECRET_KEY=${SECRET_KEY}
      - DOMAIN=${DOMAIN}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - HOST=db

    container_name: rencons-infosystem-auth

    restart: always

    ports: 
      - 8001:8000

    networks:
      - infosystem_net

    depends_on:
      - db

    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  files:
    build:
      context: ./files
      dockerfile: Dockerfile

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${FILES_DATABASE_NAME}
      - STATIC_PATH=${STATIC_PATH}
      - USER=${USER}
      - PORT=${DB_PORT}
      - MODE=${MODE}
      - HOST=db

    volumes:
      - /var/www/naks-infosystem/files:/var/www/naks-infosystem/static

    container_name: rencons-infosystem-files

    restart: always

    ports: 
      - 8002:8000

    networks:
      - infosystem_net

    depends_on:
      - db

    command: bash -c "poetry run alembic upgrade head && cd src && poetry run uvicorn app.main.app:app --workers 1 --host 0.0.0.0 --port 8000"


  db:
    restart: always
    image: postgres:16.3-alpine3.20

    container_name: rencons-infosystem-db

    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${USER}
      - PGDATA=/var/lib/postgresql/data/
      - POSTGRES_MULTIPLE_DATABASES=${BACKEND_DATABASE_NAME},${AUTH_DATABASE_NAME},${FILES_DATABASE_NAME}

    ports:
      - 5433:${DB_PORT}

    volumes:
      - db_data:/var/lib/postgresql
      - ./scripts/create_multiple_databases.sh:/docker-entrypoint-initdb.d/create_multiple_databases.sh

    networks:
      - infosystem_net

    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${BACKEND_DATABASE_NAME}", "-U", "${USER}" ]
      timeout: 3s
      retries: 5


  redis:
    image: redis:7.4.1

    container_name: rencons-infosystem-redis

    ports:
      - 6379:${REDIS_PORT}

    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf

    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

    networks:
      - infosystem_net

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

    restart: unless-stopped

    command: redis-server /usr/local/etc/redis/redis.conf


volumes:
  db_data:


networks:
  infosystem_net:
