services:

  nginx:
    container_name: nginx

    build:
      context: ./nginx
      dockerfile: Dockerfile

    volumes:
      - ./nginx/api_nginx.conf.template:/etc/nginx/api_nginx.conf.template:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl/trusted_cert.pem:/etc/nginx/trusted_cert.pem
      - ./nginx/ssl/cert.pem:/etc/nginx/cert.pem
      - ./nginx/ssl/key.pem:/etc/nginx/key.pem
      - ./certbot/:/var/www/certbot/

    ports:
      - 80:80
      - 443:443

    networks:
      - infosystem_net

    depends_on:
      - backend
      - auth

    command: > 
      bash -c "envsubst < /etc/nginx/api_nginx.conf.template > /etc/nginx/sites-available/${API_DOMAIN}.conf
      && ln -sf /etc/nginx/sites-available/${API_DOMAIN}.conf /etc/nginx/sites-enabled/
      && nginx -t
      && nginx -g 'daemon off;'"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile

    container_name: backend

    restart: always

    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_NAME=${DATABASE_NAME}
      - USER=${USER}
      - PORT=${DB_PORT}
      - MODE=${MODE}
      - HOST=db

    ports: 
      - 8000:8000

    networks:
      - infosystem_net

    depends_on:
      - db
    
    command: bash -c "alembic upgrade head && uvicorn src.app:app --workers 1 --host 0.0.0.0 --port 8000"

  db:
    container_name: db
    restart: always
    image: postgres:16.3-alpine3.20

    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${USER}
      - POSTGRES_DB=${DATABASE_NAME}
      - PGDATA=/var/lib/postgresql/data/

    ports:
      - 5433:5432

    volumes:
      - backend_data:/var/lib/postgresql

    networks:
      - infosystem_net

    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${DATABASE_NAME}", "-U", "${USER}" ]
      timeout: 3s
      retries: 5

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile

    container_name: auth

    restart: always
    
    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - AUTH_DATABASE_NAME=${AUTH_DATABASE_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - HOST=auth_db
      - USER=${USER}
      - PORT=${AUTH_PORT}
      - MODE=${MODE}

    ports: 
      - 8001:8000

    networks:
      - infosystem_net

    depends_on:
      - auth_db

    command: bash -c "alembic upgrade head && uvicorn src.app:app --workers 1 --host 0.0.0.0 --port 8000"

  auth_db:
    container_name: auth_db
    restart: always
    image: postgres:16.3-alpine3.20

    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${USER}
      - POSTGRES_DB=${AUTH_DATABASE_NAME}
      - PGDATA=/var/lib/postgresql/data/

    ports:
      - 5434:5432

    networks:
      - infosystem_net

    volumes:
      - auth_data:/var/lib/postgresql

    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${AUTH_DATABASE_NAME}", "-U", "${USER}" ]
      timeout: 3s
      retries: 5


volumes:
  backend_data:
  auth_data:


networks:
  infosystem_net:
